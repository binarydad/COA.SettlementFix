//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace COA.SettlementFix.CreditorServiceWcf {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors", ConfigurationName="CreditorServiceWcf.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/AddOfferResponse", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/AddOfferResponseResponse")]
        System.Nullable<int> AddOfferResponse(COA.EnterpriseServices.Creditors.OfferResponse response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/AddOfferResponse", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/AddOfferResponseResponse")]
        System.Threading.Tasks.Task<System.Nullable<int>> AddOfferResponseAsync(COA.EnterpriseServices.Creditors.OfferResponse response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/CopySettlementAttempt", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/CopySettlementAttemptResponse")]
        System.Nullable<int> CopySettlementAttempt(int settlementAttemptId, string overrideAttemptedAgent, System.Nullable<int> creditorContactId, System.Nullable<COA.EnterpriseServices.Creditors.CreditorStatusType> overrideCreditorStatusType, string note, string updatedBy, System.Nullable<int> PortalOfferStatus, System.Nullable<int> RelatedCreditorContact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/CopySettlementAttempt", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/CopySettlementAttemptResponse")]
        System.Threading.Tasks.Task<System.Nullable<int>> CopySettlementAttemptAsync(int settlementAttemptId, string overrideAttemptedAgent, System.Nullable<int> creditorContactId, System.Nullable<COA.EnterpriseServices.Creditors.CreditorStatusType> overrideCreditorStatusType, string note, string updatedBy, System.Nullable<int> PortalOfferStatus, System.Nullable<int> RelatedCreditorContact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetCreditorPortalContacts", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetCreditorPortalContactsResponse")]
        COA.EnterpriseServices.Creditors.Contact[] GetCreditorPortalContacts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetCreditorPortalContacts", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetCreditorPortalContactsResponse")]
        System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.Contact[]> GetCreditorPortalContactsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetCreditorPortalContactsByCreditorId", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetCreditorPortalContactsByCreditorIdResponse")]
        COA.EnterpriseServices.Creditors.Contact[] GetCreditorPortalContactsByCreditorId(int creditorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetCreditorPortalContactsByCreditorId", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetCreditorPortalContactsByCreditorIdResponse")]
        System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.Contact[]> GetCreditorPortalContactsByCreditorIdAsync(int creditorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetCreditorPortalContactsByCreditorProfileId", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetCreditorPortalContactsByCreditorProfileIdResponse")]
        COA.EnterpriseServices.Creditors.Contact[] GetCreditorPortalContactsByCreditorProfileId(int profileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetCreditorPortalContactsByCreditorProfileId", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetCreditorPortalContactsByCreditorProfileIdResponse")]
        System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.Contact[]> GetCreditorPortalContactsByCreditorProfileIdAsync(int profileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetCreditorContactById", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetCreditorContactByIdResponse")]
        COA.EnterpriseServices.Creditors.Contact GetCreditorContactById(int contactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetCreditorContactById", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetCreditorContactByIdResponse")]
        System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.Contact> GetCreditorContactByIdAsync(int contactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/UpdateCreditorContactOnboardStatus", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/UpdateCreditorContactOnboardStatusResponse")]
        void UpdateCreditorContactOnboardStatus(int contactId, COA.EnterpriseServices.Creditors.OnboardStatusType status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/UpdateCreditorContactOnboardStatus", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/UpdateCreditorContactOnboardStatusResponse")]
        System.Threading.Tasks.Task UpdateCreditorContactOnboardStatusAsync(int contactId, COA.EnterpriseServices.Creditors.OnboardStatusType status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetSettlements", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetSettlementsResponse")]
        COA.EnterpriseServices.Creditors.SettlementAttempt[] GetSettlements(COA.EnterpriseServices.Creditors.SettlementAttemptFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetSettlements", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetSettlementsResponse")]
        System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.SettlementAttempt[]> GetSettlementsAsync(COA.EnterpriseServices.Creditors.SettlementAttemptFilter filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetSettlement", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetSettlementResponse")]
        COA.EnterpriseServices.Creditors.SettlementAttempt GetSettlement(int settlementAttemptId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetSettlement", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetSettlementResponse")]
        System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.SettlementAttempt> GetSettlementAsync(int settlementAttemptId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetOutsourcedCreditors", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetOutsourcedCreditorsResponse")]
        COA.EnterpriseServices.Creditors.OutsourcedCreditor[] GetOutsourcedCreditors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetOutsourcedCreditors", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetOutsourcedCreditorsResponse")]
        System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.OutsourcedCreditor[]> GetOutsourcedCreditorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetRejectionReasons", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetRejectionReasonsResponse")]
        COA.EnterpriseServices.Creditors.RejectionReason[] GetRejectionReasons();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetRejectionReasons", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetRejectionReasonsResponse")]
        System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.RejectionReason[]> GetRejectionReasonsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetPaymentsByCreditorId", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetPaymentsByCreditorIdResponse")]
        COA.EnterpriseServices.Creditors.Payment[] GetPaymentsByCreditorId(int creditorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetPaymentsByCreditorId", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetPaymentsByCreditorIdResponse")]
        System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.Payment[]> GetPaymentsByCreditorIdAsync(int creditorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetPaymentsBySettlementAttemptId", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetPaymentsBySettlementAttemptIdResponse")]
        COA.EnterpriseServices.Creditors.Payment[] GetPaymentsBySettlementAttemptId(int settlementAttemptId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetPaymentsBySettlementAttemptId", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetPaymentsBySettlementAttemptIdResponse")]
        System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.Payment[]> GetPaymentsBySettlementAttemptIdAsync(int settlementAttemptId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/SendCreditorEmail", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/SendCreditorEmailResponse")]
        COA.EnterpriseServices.Communication.CommunicationResponse SendCreditorEmail(COA.EnterpriseServices.Creditors.CreditorEmailRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/SendCreditorEmail", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/SendCreditorEmailResponse")]
        System.Threading.Tasks.Task<COA.EnterpriseServices.Communication.CommunicationResponse> SendCreditorEmailAsync(COA.EnterpriseServices.Creditors.CreditorEmailRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/UpdateSettlementAttempt", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/UpdateSettlementAttemptResponse")]
        bool UpdateSettlementAttempt(COA.EnterpriseServices.Creditors.SettlementAttemptUpdate updateParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/UpdateSettlementAttempt", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/UpdateSettlementAttemptResponse")]
        System.Threading.Tasks.Task<bool> UpdateSettlementAttemptAsync(COA.EnterpriseServices.Creditors.SettlementAttemptUpdate updateParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/UpdateCreditor", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/UpdateCreditorResponse")]
        bool UpdateCreditor(COA.EnterpriseServices.Creditors.CreditorUpdate updateParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/UpdateCreditor", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/UpdateCreditorResponse")]
        System.Threading.Tasks.Task<bool> UpdateCreditorAsync(COA.EnterpriseServices.Creditors.CreditorUpdate updateParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/CreateBulkCreditorLink", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/CreateBulkCreditorLinkResponse")]
        int CreateBulkCreditorLink(int[] settlementAttemptIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/CreateBulkCreditorLink", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/CreateBulkCreditorLinkResponse")]
        System.Threading.Tasks.Task<int> CreateBulkCreditorLinkAsync(int[] settlementAttemptIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetBulkCreditorLinkIds", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetBulkCreditorLinkIdsResponse")]
        int[] GetBulkCreditorLinkIds(int linkId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetBulkCreditorLinkIds", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GetBulkCreditorLinkIdsResponse")]
        System.Threading.Tasks.Task<int[]> GetBulkCreditorLinkIdsAsync(int linkId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/QueueScrubList", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/QueueScrubListResponse")]
        void QueueScrubList(string importId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/QueueScrubList", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/QueueScrubListResponse")]
        System.Threading.Tasks.Task QueueScrubListAsync(string importId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/MatchScrubList", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/MatchScrubListResponse")]
        void MatchScrubList(string importId, bool rerunMatching, bool disableDatabaseCalls);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/MatchScrubList", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/MatchScrubListResponse")]
        System.Threading.Tasks.Task MatchScrubListAsync(string importId, bool rerunMatching, bool disableDatabaseCalls);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/MatchScrubLists", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/MatchScrubListsResponse")]
        void MatchScrubLists(string[] importIds, bool rerunMatching);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/MatchScrubLists", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/MatchScrubListsResponse")]
        System.Threading.Tasks.Task MatchScrubListsAsync(string[] importIds, bool rerunMatching);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/MatchScrubListsFromDatabase", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/MatchScrubListsFromDatabaseResponse")]
        void MatchScrubListsFromDatabase();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/MatchScrubListsFromDatabase", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/MatchScrubListsFromDatabaseResponse")]
        System.Threading.Tasks.Task MatchScrubListsFromDatabaseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GenerateAndEmailCapitalOneTemplate", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GenerateAndEmailCapitalOneTemplateResponse")]
        void GenerateAndEmailCapitalOneTemplate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GenerateAndEmailCapitalOneTemplate", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GenerateAndEmailCapitalOneTemplateResponse")]
        System.Threading.Tasks.Task GenerateAndEmailCapitalOneTemplateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GenerateAndEmailScrubClientTemplates", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GenerateAndEmailScrubClientTemplatesResponse")]
        void GenerateAndEmailScrubClientTemplates();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GenerateAndEmailScrubClientTemplates", ReplyAction="http://EnterpriseServices.CreditorService.com/COA.EnterpriseServices.Creditors/IS" +
            "ervice/GenerateAndEmailScrubClientTemplatesResponse")]
        System.Threading.Tasks.Task GenerateAndEmailScrubClientTemplatesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : COA.SettlementFix.CreditorServiceWcf.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<COA.SettlementFix.CreditorServiceWcf.IService>, COA.SettlementFix.CreditorServiceWcf.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Nullable<int> AddOfferResponse(COA.EnterpriseServices.Creditors.OfferResponse response) {
            return base.Channel.AddOfferResponse(response);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<int>> AddOfferResponseAsync(COA.EnterpriseServices.Creditors.OfferResponse response) {
            return base.Channel.AddOfferResponseAsync(response);
        }
        
        public System.Nullable<int> CopySettlementAttempt(int settlementAttemptId, string overrideAttemptedAgent, System.Nullable<int> creditorContactId, System.Nullable<COA.EnterpriseServices.Creditors.CreditorStatusType> overrideCreditorStatusType, string note, string updatedBy, System.Nullable<int> PortalOfferStatus, System.Nullable<int> RelatedCreditorContact) {
            return base.Channel.CopySettlementAttempt(settlementAttemptId, overrideAttemptedAgent, creditorContactId, overrideCreditorStatusType, note, updatedBy, PortalOfferStatus, RelatedCreditorContact);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<int>> CopySettlementAttemptAsync(int settlementAttemptId, string overrideAttemptedAgent, System.Nullable<int> creditorContactId, System.Nullable<COA.EnterpriseServices.Creditors.CreditorStatusType> overrideCreditorStatusType, string note, string updatedBy, System.Nullable<int> PortalOfferStatus, System.Nullable<int> RelatedCreditorContact) {
            return base.Channel.CopySettlementAttemptAsync(settlementAttemptId, overrideAttemptedAgent, creditorContactId, overrideCreditorStatusType, note, updatedBy, PortalOfferStatus, RelatedCreditorContact);
        }
        
        public COA.EnterpriseServices.Creditors.Contact[] GetCreditorPortalContacts() {
            return base.Channel.GetCreditorPortalContacts();
        }
        
        public System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.Contact[]> GetCreditorPortalContactsAsync() {
            return base.Channel.GetCreditorPortalContactsAsync();
        }
        
        public COA.EnterpriseServices.Creditors.Contact[] GetCreditorPortalContactsByCreditorId(int creditorId) {
            return base.Channel.GetCreditorPortalContactsByCreditorId(creditorId);
        }
        
        public System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.Contact[]> GetCreditorPortalContactsByCreditorIdAsync(int creditorId) {
            return base.Channel.GetCreditorPortalContactsByCreditorIdAsync(creditorId);
        }
        
        public COA.EnterpriseServices.Creditors.Contact[] GetCreditorPortalContactsByCreditorProfileId(int profileId) {
            return base.Channel.GetCreditorPortalContactsByCreditorProfileId(profileId);
        }
        
        public System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.Contact[]> GetCreditorPortalContactsByCreditorProfileIdAsync(int profileId) {
            return base.Channel.GetCreditorPortalContactsByCreditorProfileIdAsync(profileId);
        }
        
        public COA.EnterpriseServices.Creditors.Contact GetCreditorContactById(int contactId) {
            return base.Channel.GetCreditorContactById(contactId);
        }
        
        public System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.Contact> GetCreditorContactByIdAsync(int contactId) {
            return base.Channel.GetCreditorContactByIdAsync(contactId);
        }
        
        public void UpdateCreditorContactOnboardStatus(int contactId, COA.EnterpriseServices.Creditors.OnboardStatusType status) {
            base.Channel.UpdateCreditorContactOnboardStatus(contactId, status);
        }
        
        public System.Threading.Tasks.Task UpdateCreditorContactOnboardStatusAsync(int contactId, COA.EnterpriseServices.Creditors.OnboardStatusType status) {
            return base.Channel.UpdateCreditorContactOnboardStatusAsync(contactId, status);
        }
        
        public COA.EnterpriseServices.Creditors.SettlementAttempt[] GetSettlements(COA.EnterpriseServices.Creditors.SettlementAttemptFilter filter) {
            return base.Channel.GetSettlements(filter);
        }
        
        public System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.SettlementAttempt[]> GetSettlementsAsync(COA.EnterpriseServices.Creditors.SettlementAttemptFilter filter) {
            return base.Channel.GetSettlementsAsync(filter);
        }
        
        public COA.EnterpriseServices.Creditors.SettlementAttempt GetSettlement(int settlementAttemptId) {
            return base.Channel.GetSettlement(settlementAttemptId);
        }
        
        public System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.SettlementAttempt> GetSettlementAsync(int settlementAttemptId) {
            return base.Channel.GetSettlementAsync(settlementAttemptId);
        }
        
        public COA.EnterpriseServices.Creditors.OutsourcedCreditor[] GetOutsourcedCreditors() {
            return base.Channel.GetOutsourcedCreditors();
        }
        
        public System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.OutsourcedCreditor[]> GetOutsourcedCreditorsAsync() {
            return base.Channel.GetOutsourcedCreditorsAsync();
        }
        
        public COA.EnterpriseServices.Creditors.RejectionReason[] GetRejectionReasons() {
            return base.Channel.GetRejectionReasons();
        }
        
        public System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.RejectionReason[]> GetRejectionReasonsAsync() {
            return base.Channel.GetRejectionReasonsAsync();
        }
        
        public COA.EnterpriseServices.Creditors.Payment[] GetPaymentsByCreditorId(int creditorId) {
            return base.Channel.GetPaymentsByCreditorId(creditorId);
        }
        
        public System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.Payment[]> GetPaymentsByCreditorIdAsync(int creditorId) {
            return base.Channel.GetPaymentsByCreditorIdAsync(creditorId);
        }
        
        public COA.EnterpriseServices.Creditors.Payment[] GetPaymentsBySettlementAttemptId(int settlementAttemptId) {
            return base.Channel.GetPaymentsBySettlementAttemptId(settlementAttemptId);
        }
        
        public System.Threading.Tasks.Task<COA.EnterpriseServices.Creditors.Payment[]> GetPaymentsBySettlementAttemptIdAsync(int settlementAttemptId) {
            return base.Channel.GetPaymentsBySettlementAttemptIdAsync(settlementAttemptId);
        }
        
        public COA.EnterpriseServices.Communication.CommunicationResponse SendCreditorEmail(COA.EnterpriseServices.Creditors.CreditorEmailRequest request) {
            return base.Channel.SendCreditorEmail(request);
        }
        
        public System.Threading.Tasks.Task<COA.EnterpriseServices.Communication.CommunicationResponse> SendCreditorEmailAsync(COA.EnterpriseServices.Creditors.CreditorEmailRequest request) {
            return base.Channel.SendCreditorEmailAsync(request);
        }
        
        public bool UpdateSettlementAttempt(COA.EnterpriseServices.Creditors.SettlementAttemptUpdate updateParams) {
            return base.Channel.UpdateSettlementAttempt(updateParams);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSettlementAttemptAsync(COA.EnterpriseServices.Creditors.SettlementAttemptUpdate updateParams) {
            return base.Channel.UpdateSettlementAttemptAsync(updateParams);
        }
        
        public bool UpdateCreditor(COA.EnterpriseServices.Creditors.CreditorUpdate updateParams) {
            return base.Channel.UpdateCreditor(updateParams);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCreditorAsync(COA.EnterpriseServices.Creditors.CreditorUpdate updateParams) {
            return base.Channel.UpdateCreditorAsync(updateParams);
        }
        
        public int CreateBulkCreditorLink(int[] settlementAttemptIds) {
            return base.Channel.CreateBulkCreditorLink(settlementAttemptIds);
        }
        
        public System.Threading.Tasks.Task<int> CreateBulkCreditorLinkAsync(int[] settlementAttemptIds) {
            return base.Channel.CreateBulkCreditorLinkAsync(settlementAttemptIds);
        }
        
        public int[] GetBulkCreditorLinkIds(int linkId) {
            return base.Channel.GetBulkCreditorLinkIds(linkId);
        }
        
        public System.Threading.Tasks.Task<int[]> GetBulkCreditorLinkIdsAsync(int linkId) {
            return base.Channel.GetBulkCreditorLinkIdsAsync(linkId);
        }
        
        public void QueueScrubList(string importId) {
            base.Channel.QueueScrubList(importId);
        }
        
        public System.Threading.Tasks.Task QueueScrubListAsync(string importId) {
            return base.Channel.QueueScrubListAsync(importId);
        }
        
        public void MatchScrubList(string importId, bool rerunMatching, bool disableDatabaseCalls) {
            base.Channel.MatchScrubList(importId, rerunMatching, disableDatabaseCalls);
        }
        
        public System.Threading.Tasks.Task MatchScrubListAsync(string importId, bool rerunMatching, bool disableDatabaseCalls) {
            return base.Channel.MatchScrubListAsync(importId, rerunMatching, disableDatabaseCalls);
        }
        
        public void MatchScrubLists(string[] importIds, bool rerunMatching) {
            base.Channel.MatchScrubLists(importIds, rerunMatching);
        }
        
        public System.Threading.Tasks.Task MatchScrubListsAsync(string[] importIds, bool rerunMatching) {
            return base.Channel.MatchScrubListsAsync(importIds, rerunMatching);
        }
        
        public void MatchScrubListsFromDatabase() {
            base.Channel.MatchScrubListsFromDatabase();
        }
        
        public System.Threading.Tasks.Task MatchScrubListsFromDatabaseAsync() {
            return base.Channel.MatchScrubListsFromDatabaseAsync();
        }
        
        public void GenerateAndEmailCapitalOneTemplate() {
            base.Channel.GenerateAndEmailCapitalOneTemplate();
        }
        
        public System.Threading.Tasks.Task GenerateAndEmailCapitalOneTemplateAsync() {
            return base.Channel.GenerateAndEmailCapitalOneTemplateAsync();
        }
        
        public void GenerateAndEmailScrubClientTemplates() {
            base.Channel.GenerateAndEmailScrubClientTemplates();
        }
        
        public System.Threading.Tasks.Task GenerateAndEmailScrubClientTemplatesAsync() {
            return base.Channel.GenerateAndEmailScrubClientTemplatesAsync();
        }
    }
}
